
MGR_V1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  000005b4  00000648  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005b4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000022  00800108  00800108  00000650  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000650  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000c0  00000000  00000000  00000680  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000090d  00000000  00000000  00000740  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000036c  00000000  00000000  0000104d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000442  00000000  00000000  000013b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000198  00000000  00000000  000017fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000029a  00000000  00000000  00001994  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000371  00000000  00000000  00001c2e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a0  00000000  00000000  00001f9f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 eb       	ldi	r30, 0xB4	; 180
  7c:	f5 e0       	ldi	r31, 0x05	; 5
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 30       	cpi	r26, 0x08	; 8
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a8 e0       	ldi	r26, 0x08	; 8
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	aa 32       	cpi	r26, 0x2A	; 42
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <main>
  9e:	0c 94 d8 02 	jmp	0x5b0	; 0x5b0 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <_LCD_OutNibble>:
//
//-------------------------------------------------------------------------------------------------
void _LCD_OutNibble(unsigned char nibbleToWrite)
{

if(nibbleToWrite & 0x01)
  a6:	80 ff       	sbrs	r24, 0
  a8:	02 c0       	rjmp	.+4      	; 0xae <_LCD_OutNibble+0x8>
	LCD_DB4_PORT |= LCD_DB4;
  aa:	5a 9a       	sbi	0x0b, 2	; 11
  ac:	01 c0       	rjmp	.+2      	; 0xb0 <_LCD_OutNibble+0xa>
else
	LCD_DB4_PORT  &= ~LCD_DB4;
  ae:	5a 98       	cbi	0x0b, 2	; 11

if(nibbleToWrite & 0x02)
  b0:	81 ff       	sbrs	r24, 1
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <_LCD_OutNibble+0x12>
	LCD_DB5_PORT |= LCD_DB5;
  b4:	5b 9a       	sbi	0x0b, 3	; 11
  b6:	01 c0       	rjmp	.+2      	; 0xba <_LCD_OutNibble+0x14>
else
	LCD_DB5_PORT  &= ~LCD_DB5;
  b8:	5b 98       	cbi	0x0b, 3	; 11

if(nibbleToWrite & 0x04)
  ba:	82 ff       	sbrs	r24, 2
  bc:	02 c0       	rjmp	.+4      	; 0xc2 <_LCD_OutNibble+0x1c>
	LCD_DB6_PORT |= LCD_DB6;
  be:	5c 9a       	sbi	0x0b, 4	; 11
  c0:	01 c0       	rjmp	.+2      	; 0xc4 <_LCD_OutNibble+0x1e>
else
	LCD_DB6_PORT  &= ~LCD_DB6;
  c2:	5c 98       	cbi	0x0b, 4	; 11

if(nibbleToWrite & 0x08)
  c4:	83 ff       	sbrs	r24, 3
  c6:	02 c0       	rjmp	.+4      	; 0xcc <_LCD_OutNibble+0x26>
	LCD_DB7_PORT |= LCD_DB7;
  c8:	5d 9a       	sbi	0x0b, 5	; 11
  ca:	08 95       	ret
else
	LCD_DB7_PORT  &= ~LCD_DB7;
  cc:	5d 98       	cbi	0x0b, 5	; 11
  ce:	08 95       	ret

000000d0 <_LCD_InNibble>:
//-------------------------------------------------------------------------------------------------
unsigned char _LCD_InNibble(void)
{
unsigned char tmp = 0;

if(LCD_DB4_PIN & LCD_DB4)
  d0:	89 b1       	in	r24, 0x09	; 9
  d2:	82 fb       	bst	r24, 2
  d4:	88 27       	eor	r24, r24
  d6:	80 f9       	bld	r24, 0
	tmp |= (1 << 0);
if(LCD_DB5_PIN & LCD_DB5)
  d8:	4b 99       	sbic	0x09, 3	; 9
	tmp |= (1 << 1);
  da:	82 60       	ori	r24, 0x02	; 2
if(LCD_DB6_PIN & LCD_DB6)
  dc:	4c 99       	sbic	0x09, 4	; 9
	tmp |= (1 << 2);
  de:	84 60       	ori	r24, 0x04	; 4
if(LCD_DB7_PIN & LCD_DB7)
  e0:	4d 99       	sbic	0x09, 5	; 9
	tmp |= (1 << 3);
  e2:	88 60       	ori	r24, 0x08	; 8
return tmp;
}
  e4:	08 95       	ret

000000e6 <_LCD_Read>:
// Funkcja odczytu bajtu z wyœwietacza (bez rozró¿nienia instrukcja/dane).
//
//-------------------------------------------------------------------------------------------------

unsigned char _LCD_Read(void)
{
  e6:	cf 93       	push	r28
  e8:	df 93       	push	r29
unsigned char tmp = 0;
LCD_DB4_DIR &= ~LCD_DB4;
  ea:	52 98       	cbi	0x0a, 2	; 10
LCD_DB5_DIR &= ~LCD_DB5;
  ec:	53 98       	cbi	0x0a, 3	; 10
LCD_DB6_DIR &= ~LCD_DB6;
  ee:	54 98       	cbi	0x0a, 4	; 10
LCD_DB7_DIR &= ~LCD_DB7;
  f0:	55 98       	cbi	0x0a, 5	; 10

LCD_RW_PORT |= LCD_RW;
  f2:	5f 9a       	sbi	0x0b, 7	; 11
LCD_E_PORT |= LCD_E;
  f4:	28 9a       	sbi	0x05, 0	; 5
tmp |= (_LCD_InNibble() << 4);
  f6:	0e 94 68 00 	call	0xd0	; 0xd0 <_LCD_InNibble>
  fa:	90 e1       	ldi	r25, 0x10	; 16
  fc:	89 9f       	mul	r24, r25
  fe:	e0 01       	movw	r28, r0
 100:	11 24       	eor	r1, r1
LCD_E_PORT &= ~LCD_E;
 102:	28 98       	cbi	0x05, 0	; 5
LCD_E_PORT |= LCD_E;
 104:	28 9a       	sbi	0x05, 0	; 5
tmp |= _LCD_InNibble();
 106:	0e 94 68 00 	call	0xd0	; 0xd0 <_LCD_InNibble>
LCD_E_PORT &= ~LCD_E;
 10a:	28 98       	cbi	0x05, 0	; 5
return tmp;
}
 10c:	8c 2b       	or	r24, r28
 10e:	df 91       	pop	r29
 110:	cf 91       	pop	r28
 112:	08 95       	ret

00000114 <LCD_ReadStatus>:
// Funkcja odczytu bajtu statusowego
//
//-------------------------------------------------------------------------------------------------
unsigned char LCD_ReadStatus(void)
{
LCD_RS_PORT &= ~LCD_RS;
 114:	5e 98       	cbi	0x0b, 6	; 11
return _LCD_Read();
 116:	0e 94 73 00 	call	0xe6	; 0xe6 <_LCD_Read>
}
 11a:	08 95       	ret

0000011c <_LCD_Write>:
//
// Funkcja zapisu bajtu do wyœwietacza (bez rozró¿nienia instrukcja/dane).
//
//-------------------------------------------------------------------------------------------------
void _LCD_Write(unsigned char dataToWrite)
{
 11c:	cf 93       	push	r28
 11e:	c8 2f       	mov	r28, r24
LCD_DB4_DIR |= LCD_DB4;
 120:	52 9a       	sbi	0x0a, 2	; 10
LCD_DB5_DIR |= LCD_DB5;
 122:	53 9a       	sbi	0x0a, 3	; 10
LCD_DB6_DIR |= LCD_DB6;
 124:	54 9a       	sbi	0x0a, 4	; 10
LCD_DB7_DIR |= LCD_DB7;
 126:	55 9a       	sbi	0x0a, 5	; 10

LCD_RW_PORT &= ~LCD_RW;
 128:	5f 98       	cbi	0x0b, 7	; 11
LCD_E_PORT |= LCD_E;
 12a:	28 9a       	sbi	0x05, 0	; 5
_LCD_OutNibble(dataToWrite >> 4);
 12c:	82 95       	swap	r24
 12e:	8f 70       	andi	r24, 0x0F	; 15
 130:	0e 94 53 00 	call	0xa6	; 0xa6 <_LCD_OutNibble>
LCD_E_PORT &= ~LCD_E;
 134:	28 98       	cbi	0x05, 0	; 5
LCD_E_PORT |= LCD_E;
 136:	28 9a       	sbi	0x05, 0	; 5
_LCD_OutNibble(dataToWrite);
 138:	8c 2f       	mov	r24, r28
 13a:	0e 94 53 00 	call	0xa6	; 0xa6 <_LCD_OutNibble>
LCD_E_PORT &= ~LCD_E;
 13e:	28 98       	cbi	0x05, 0	; 5
while(LCD_ReadStatus()&0x80);
 140:	0e 94 8a 00 	call	0x114	; 0x114 <LCD_ReadStatus>
 144:	88 23       	and	r24, r24
 146:	e4 f3       	brlt	.-8      	; 0x140 <_LCD_Write+0x24>
}
 148:	cf 91       	pop	r28
 14a:	08 95       	ret

0000014c <LCD_WriteCommand>:
// Funkcja zapisu rozkazu do wyœwietlacza
//
//-------------------------------------------------------------------------------------------------
void LCD_WriteCommand(unsigned char commandToWrite)
{
LCD_RS_PORT &= ~LCD_RS;
 14c:	5e 98       	cbi	0x0b, 6	; 11
_LCD_Write(commandToWrite);
 14e:	0e 94 8e 00 	call	0x11c	; 0x11c <_LCD_Write>
 152:	08 95       	ret

00000154 <LCD_WriteData>:
// Funkcja zapisu danych do pamiêci wyœwietlacza
//
//-------------------------------------------------------------------------------------------------
void LCD_WriteData(unsigned char dataToWrite)
{
LCD_RS_PORT |= LCD_RS;
 154:	5e 9a       	sbi	0x0b, 6	; 11
_LCD_Write(dataToWrite);
 156:	0e 94 8e 00 	call	0x11c	; 0x11c <_LCD_Write>
 15a:	08 95       	ret

0000015c <LCD_WriteText>:
//
// Funkcja wyœwietlenia napisu na wyswietlaczu.
//
//-------------------------------------------------------------------------------------------------
void LCD_WriteText(char * text)
{
 15c:	cf 93       	push	r28
 15e:	df 93       	push	r29
 160:	ec 01       	movw	r28, r24
while(*text)
 162:	88 81       	ld	r24, Y
 164:	88 23       	and	r24, r24
 166:	31 f0       	breq	.+12     	; 0x174 <LCD_WriteText+0x18>
 168:	21 96       	adiw	r28, 0x01	; 1
  LCD_WriteData(*text++);
 16a:	0e 94 aa 00 	call	0x154	; 0x154 <LCD_WriteData>
// Funkcja wyœwietlenia napisu na wyswietlaczu.
//
//-------------------------------------------------------------------------------------------------
void LCD_WriteText(char * text)
{
while(*text)
 16e:	89 91       	ld	r24, Y+
 170:	81 11       	cpse	r24, r1
 172:	fb cf       	rjmp	.-10     	; 0x16a <LCD_WriteText+0xe>
  LCD_WriteData(*text++);
}
 174:	df 91       	pop	r29
 176:	cf 91       	pop	r28
 178:	08 95       	ret

0000017a <LCD_Clear>:
// Funkcja czyszczenia ekranu wyœwietlacza.
//
//-------------------------------------------------------------------------------------------------
void LCD_Clear(void)
{
LCD_WriteCommand(HD44780_CLEAR);
 17a:	81 e0       	ldi	r24, 0x01	; 1
 17c:	0e 94 a6 00 	call	0x14c	; 0x14c <LCD_WriteCommand>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 180:	8f e3       	ldi	r24, 0x3F	; 63
 182:	9f e1       	ldi	r25, 0x1F	; 31
 184:	01 97       	sbiw	r24, 0x01	; 1
 186:	f1 f7       	brne	.-4      	; 0x184 <LCD_Clear+0xa>
 188:	00 c0       	rjmp	.+0      	; 0x18a <LCD_Clear+0x10>
 18a:	00 00       	nop
 18c:	08 95       	ret

0000018e <LCD_Initalize>:
//
// Procedura inicjalizacji kontrolera HD44780.
//
//-------------------------------------------------------------------------------------------------
void LCD_Initalize(void)
{
 18e:	cf 93       	push	r28
unsigned char i;
LCD_DB4_DIR |= LCD_DB4; // Konfiguracja kierunku pracy wyprowadzeñ
 190:	52 9a       	sbi	0x0a, 2	; 10
LCD_DB5_DIR |= LCD_DB5; //
 192:	53 9a       	sbi	0x0a, 3	; 10
LCD_DB6_DIR |= LCD_DB6; //
 194:	54 9a       	sbi	0x0a, 4	; 10
LCD_DB7_DIR |= LCD_DB7; //
 196:	55 9a       	sbi	0x0a, 5	; 10
LCD_E_DIR 	|= LCD_E;   //
 198:	20 9a       	sbi	0x04, 0	; 4
LCD_RS_DIR 	|= LCD_RS;  //
 19a:	56 9a       	sbi	0x0a, 6	; 10
LCD_RW_DIR 	|= LCD_RW;  //
 19c:	57 9a       	sbi	0x0a, 7	; 10
 19e:	8f e5       	ldi	r24, 0x5F	; 95
 1a0:	9a ee       	ldi	r25, 0xEA	; 234
 1a2:	01 97       	sbiw	r24, 0x01	; 1
 1a4:	f1 f7       	brne	.-4      	; 0x1a2 <LCD_Initalize+0x14>
 1a6:	00 c0       	rjmp	.+0      	; 0x1a8 <LCD_Initalize+0x1a>
 1a8:	00 00       	nop
_delay_ms(15); // oczekiwanie na ustalibizowanie siê napiecia zasilajacego
LCD_RS_PORT &= ~LCD_RS; // wyzerowanie linii RS
 1aa:	5e 98       	cbi	0x0b, 6	; 11
LCD_E_PORT &= ~LCD_E;  // wyzerowanie linii E
 1ac:	28 98       	cbi	0x05, 0	; 5
LCD_RW_PORT &= ~LCD_RW;
 1ae:	5f 98       	cbi	0x0b, 7	; 11
 1b0:	c3 e0       	ldi	r28, 0x03	; 3
for(i = 0; i < 3; i++) // trzykrotne powtórzenie bloku instrukcji
  {
  LCD_E_PORT |= LCD_E; //  E = 1
 1b2:	28 9a       	sbi	0x05, 0	; 5
  _LCD_OutNibble(0x03); // tryb 8-bitowy
 1b4:	83 e0       	ldi	r24, 0x03	; 3
 1b6:	0e 94 53 00 	call	0xa6	; 0xa6 <_LCD_OutNibble>
  LCD_E_PORT &= ~LCD_E; // E = 0
 1ba:	28 98       	cbi	0x05, 0	; 5
 1bc:	8f e1       	ldi	r24, 0x1F	; 31
 1be:	9e e4       	ldi	r25, 0x4E	; 78
 1c0:	01 97       	sbiw	r24, 0x01	; 1
 1c2:	f1 f7       	brne	.-4      	; 0x1c0 <LCD_Initalize+0x32>
 1c4:	00 c0       	rjmp	.+0      	; 0x1c6 <LCD_Initalize+0x38>
 1c6:	00 00       	nop
 1c8:	c1 50       	subi	r28, 0x01	; 1
LCD_RW_DIR 	|= LCD_RW;  //
_delay_ms(15); // oczekiwanie na ustalibizowanie siê napiecia zasilajacego
LCD_RS_PORT &= ~LCD_RS; // wyzerowanie linii RS
LCD_E_PORT &= ~LCD_E;  // wyzerowanie linii E
LCD_RW_PORT &= ~LCD_RW;
for(i = 0; i < 3; i++) // trzykrotne powtórzenie bloku instrukcji
 1ca:	99 f7       	brne	.-26     	; 0x1b2 <LCD_Initalize+0x24>
  _LCD_OutNibble(0x03); // tryb 8-bitowy
  LCD_E_PORT &= ~LCD_E; // E = 0
  _delay_ms(5); // czekaj 5ms
  }

LCD_E_PORT |= LCD_E; // E = 1
 1cc:	28 9a       	sbi	0x05, 0	; 5
_LCD_OutNibble(0x02); // tryb 4-bitowy
 1ce:	82 e0       	ldi	r24, 0x02	; 2
 1d0:	0e 94 53 00 	call	0xa6	; 0xa6 <_LCD_OutNibble>
LCD_E_PORT &= ~LCD_E; // E = 0
 1d4:	28 98       	cbi	0x05, 0	; 5
 1d6:	8f e9       	ldi	r24, 0x9F	; 159
 1d8:	9f e0       	ldi	r25, 0x0F	; 15
 1da:	01 97       	sbiw	r24, 0x01	; 1
 1dc:	f1 f7       	brne	.-4      	; 0x1da <LCD_Initalize+0x4c>
 1de:	00 c0       	rjmp	.+0      	; 0x1e0 <LCD_Initalize+0x52>
 1e0:	00 00       	nop

_delay_ms(1); // czekaj 1ms 
LCD_WriteCommand(HD44780_FUNCTION_SET | HD44780_FONT5x7 | HD44780_TWO_LINE | HD44780_4_BIT); // interfejs 4-bity, 2-linie, znak 5x7
 1e2:	88 e2       	ldi	r24, 0x28	; 40
 1e4:	0e 94 a6 00 	call	0x14c	; 0x14c <LCD_WriteCommand>
LCD_WriteCommand(HD44780_DISPLAY_ONOFF | HD44780_DISPLAY_OFF); // wy³¹czenie wyswietlacza
 1e8:	88 e0       	ldi	r24, 0x08	; 8
 1ea:	0e 94 a6 00 	call	0x14c	; 0x14c <LCD_WriteCommand>
LCD_WriteCommand(HD44780_CLEAR); // czyszczenie zawartosæi pamieci DDRAM
 1ee:	81 e0       	ldi	r24, 0x01	; 1
 1f0:	0e 94 a6 00 	call	0x14c	; 0x14c <LCD_WriteCommand>
LCD_WriteCommand(HD44780_ENTRY_MODE | HD44780_EM_SHIFT_CURSOR | HD44780_EM_INCREMENT);// inkrementaja adresu i przesuwanie kursora
 1f4:	86 e0       	ldi	r24, 0x06	; 6
 1f6:	0e 94 a6 00 	call	0x14c	; 0x14c <LCD_WriteCommand>
LCD_WriteCommand(HD44780_DISPLAY_ONOFF | HD44780_DISPLAY_ON | HD44780_CURSOR_OFF | HD44780_CURSOR_NOBLINK); // w³¹cz LCD, bez kursora i mrugania
 1fa:	8c e0       	ldi	r24, 0x0C	; 12
 1fc:	0e 94 a6 00 	call	0x14c	; 0x14c <LCD_WriteCommand>
}
 200:	cf 91       	pop	r28
 202:	08 95       	ret

00000204 <ADC_init>:
}

void ADC_init()
{
	//Uruchomienie ADC, wewnêtrzne napiecie odniesienia, tryb pojedynczej konwersji, preskaler 128, wejœcie PIN5, wynik do prawej
	ADCSRA |= 	 (1<<ADEN)//Bit 7 – ADEN: ADC Enable (uruchomienie przetwornika)
 204:	ea e7       	ldi	r30, 0x7A	; 122
 206:	f0 e0       	ldi	r31, 0x00	; 0
 208:	80 81       	ld	r24, Z
 20a:	87 68       	ori	r24, 0x87	; 135
 20c:	80 83       	st	Z, r24
	|(1<<ADPS0)
	|(1<<ADPS1)
	|(1<<ADPS2);//ADPS2:0: ADC Prescaler Select Bits (ustawienie preskalera) preskaler= 128

	ADMUX  =	 (1<<REFS1) | (1<<REFS0)//Bit 7:6 – REFS1:0: Reference Selection Bits
 20e:	83 ec       	ldi	r24, 0xC3	; 195
 210:	80 93 7c 00 	sts	0x007C, r24
	//Internal 1.1V Voltage Reference with external capacitor at AREF pin
	|(1<<MUX1) | (1<<MUX0);//Input Channel Selections (ADC5 - Pin 5 )
	
	DDRC &=~ (1<<PC0);            //Ustawienie Wejœcia ADC
 214:	38 98       	cbi	0x07, 0	; 7
	DDRC &=~ (1<<PC1);            //Ustawienie Wejœcia ADC
 216:	39 98       	cbi	0x07, 1	; 7
	DDRC &=~ (1<<ADCINBOT);            //Ustawienie Wejœcia ADC
 218:	3a 98       	cbi	0x07, 2	; 7
	DDRC &=~ (1<<ADCINTOP);            //Ustawienie Wejœcia ADC
 21a:	3b 98       	cbi	0x07, 3	; 7
 21c:	08 95       	ret

0000021e <ADC_mes>:
	
}

void ADC_mes()
{
	ADCSRA |= (1<<ADSC);//Bit 6 – ADSC: ADC Start Conversion (uruchomienie pojedynczej konwersji
 21e:	ea e7       	ldi	r30, 0x7A	; 122
 220:	f0 e0       	ldi	r31, 0x00	; 0
 222:	80 81       	ld	r24, Z
 224:	80 64       	ori	r24, 0x40	; 64
 226:	80 83       	st	Z, r24
	while(ADCSRA & (1<<ADSC));//czeka na zakoñczenie konwersji
 228:	80 81       	ld	r24, Z
 22a:	86 fd       	sbrc	r24, 6
 22c:	fd cf       	rjmp	.-6      	; 0x228 <ADC_mes+0xa>
}
 22e:	08 95       	ret

00000230 <MaxFromArray>:
   End If
	*/
}

uint16_t MaxFromArray(uint8_t* array)
{
 230:	fc 01       	movw	r30, r24
	uint8_t max = array[0];
 232:	20 81       	ld	r18, Z
	for(int i = 1; i<4; i++)
	{
		if(array[i] > max)
 234:	31 81       	ldd	r19, Z+1	; 0x01
 236:	92 81       	ldd	r25, Z+2	; 0x02
 238:	83 81       	ldd	r24, Z+3	; 0x03
 23a:	83 17       	cp	r24, r19
 23c:	08 f4       	brcc	.+2      	; 0x240 <MaxFromArray+0x10>
 23e:	83 2f       	mov	r24, r19
 240:	82 17       	cp	r24, r18
 242:	08 f4       	brcc	.+2      	; 0x246 <MaxFromArray+0x16>
 244:	82 2f       	mov	r24, r18
 246:	89 17       	cp	r24, r25
 248:	08 f4       	brcc	.+2      	; 0x24c <MaxFromArray+0x1c>
 24a:	89 2f       	mov	r24, r25
			max = array[i];
	}
	return max;
 24c:	90 e0       	ldi	r25, 0x00	; 0
 24e:	08 95       	ret

00000250 <Pos_init>:
{
	ADCSRA |= (1<<ADSC);//Bit 6 – ADSC: ADC Start Conversion (uruchomienie pojedynczej konwersji
	while(ADCSRA & (1<<ADSC));//czeka na zakoñczenie konwersji
}
void Pos_init()
{
 250:	cf 92       	push	r12
 252:	df 92       	push	r13
 254:	ef 92       	push	r14
 256:	ff 92       	push	r15
 258:	0f 93       	push	r16
 25a:	1f 93       	push	r17
 25c:	cf 93       	push	r28
 25e:	df 93       	push	r29
	ADMUX = (1<<REFS1) | (1<<REFS0) | GLUE(ADC, 0);
 260:	0c e7       	ldi	r16, 0x7C	; 124
 262:	10 e0       	ldi	r17, 0x00	; 0
 264:	80 ec       	ldi	r24, 0xC0	; 192
 266:	f8 01       	movw	r30, r16
 268:	80 83       	st	Z, r24
	ADC_mes();
 26a:	0e 94 0f 01 	call	0x21e	; 0x21e <ADC_mes>
	W1 = ADC;
 26e:	c8 e7       	ldi	r28, 0x78	; 120
 270:	d0 e0       	ldi	r29, 0x00	; 0
 272:	88 81       	ld	r24, Y
 274:	99 81       	ldd	r25, Y+1	; 0x01
 276:	90 93 0f 01 	sts	0x010F, r25
 27a:	80 93 0e 01 	sts	0x010E, r24
	W[0] = W1 / 4;
 27e:	96 95       	lsr	r25
 280:	87 95       	ror	r24
 282:	96 95       	lsr	r25
 284:	87 95       	ror	r24
 286:	80 93 12 01 	sts	0x0112, r24
	ADMUX = (1<<REFS1) | (1<<REFS0) | GLUE(ADC, 1);
 28a:	81 ec       	ldi	r24, 0xC1	; 193
 28c:	f8 01       	movw	r30, r16
 28e:	80 83       	st	Z, r24
	ADC_mes();
 290:	0e 94 0f 01 	call	0x21e	; 0x21e <ADC_mes>
	W2 = ADC;
 294:	88 81       	ld	r24, Y
 296:	99 81       	ldd	r25, Y+1	; 0x01
 298:	90 93 27 01 	sts	0x0127, r25
 29c:	80 93 26 01 	sts	0x0126, r24
	W[1] = W2 / 4;
 2a0:	96 95       	lsr	r25
 2a2:	87 95       	ror	r24
 2a4:	96 95       	lsr	r25
 2a6:	87 95       	ror	r24
 2a8:	80 93 13 01 	sts	0x0113, r24
	ADMUX = (1<<REFS1) | (1<<REFS0) | GLUE(ADC, 2);
 2ac:	82 ec       	ldi	r24, 0xC2	; 194
 2ae:	f8 01       	movw	r30, r16
 2b0:	80 83       	st	Z, r24
	ADC_mes();
 2b2:	0e 94 0f 01 	call	0x21e	; 0x21e <ADC_mes>
	W3 = ADC;
 2b6:	88 81       	ld	r24, Y
 2b8:	99 81       	ldd	r25, Y+1	; 0x01
 2ba:	90 93 0b 01 	sts	0x010B, r25
 2be:	80 93 0a 01 	sts	0x010A, r24
	W[2] = W3 / 4;
 2c2:	96 95       	lsr	r25
 2c4:	87 95       	ror	r24
 2c6:	96 95       	lsr	r25
 2c8:	87 95       	ror	r24
 2ca:	80 93 14 01 	sts	0x0114, r24
	ADMUX = (1<<REFS1) | (1<<REFS0) | GLUE(ADC, 3);
 2ce:	83 ec       	ldi	r24, 0xC3	; 195
 2d0:	f8 01       	movw	r30, r16
 2d2:	80 83       	st	Z, r24
	ADC_mes();
 2d4:	0e 94 0f 01 	call	0x21e	; 0x21e <ADC_mes>
	W4 = ADC;
 2d8:	e8 80       	ld	r14, Y
 2da:	f9 80       	ldd	r15, Y+1	; 0x01
 2dc:	f0 92 11 01 	sts	0x0111, r15
 2e0:	e0 92 10 01 	sts	0x0110, r14
	W[3] = W4 / 4;
 2e4:	c7 01       	movw	r24, r14
 2e6:	96 95       	lsr	r25
 2e8:	87 95       	ror	r24
 2ea:	96 95       	lsr	r25
 2ec:	87 95       	ror	r24
 2ee:	80 93 15 01 	sts	0x0115, r24
	Difr = MaxFromArray(W);
 2f2:	82 e1       	ldi	r24, 0x12	; 18
 2f4:	91 e0       	ldi	r25, 0x01	; 1
 2f6:	0e 94 18 01 	call	0x230	; 0x230 <MaxFromArray>
 2fa:	8c 01       	movw	r16, r24
 2fc:	90 93 29 01 	sts	0x0129, r25
 300:	80 93 28 01 	sts	0x0128, r24
	DifrX = W1 - W2;
 304:	c0 91 0e 01 	lds	r28, 0x010E
 308:	d0 91 0f 01 	lds	r29, 0x010F
 30c:	80 91 26 01 	lds	r24, 0x0126
 310:	90 91 27 01 	lds	r25, 0x0127
 314:	c8 1b       	sub	r28, r24
 316:	d9 0b       	sbc	r29, r25
 318:	d0 93 09 01 	sts	0x0109, r29
 31c:	c0 93 08 01 	sts	0x0108, r28
	DifrY = W3 - W4;
 320:	80 91 0a 01 	lds	r24, 0x010A
 324:	90 91 0b 01 	lds	r25, 0x010B
 328:	8e 19       	sub	r24, r14
 32a:	9f 09       	sbc	r25, r15
 32c:	90 93 0d 01 	sts	0x010D, r25
 330:	80 93 0c 01 	sts	0x010C, r24
	
	
	if (fabs(DifrX) > Difr)
 334:	be 01       	movw	r22, r28
 336:	88 27       	eor	r24, r24
 338:	77 fd       	sbrc	r23, 7
 33a:	80 95       	com	r24
 33c:	98 2f       	mov	r25, r24
 33e:	0e 94 35 02 	call	0x46a	; 0x46a <__floatsisf>
 342:	6b 01       	movw	r12, r22
 344:	7c 01       	movw	r14, r24
 346:	e8 94       	clt
 348:	f7 f8       	bld	r15, 7
 34a:	b8 01       	movw	r22, r16
 34c:	88 27       	eor	r24, r24
 34e:	77 fd       	sbrc	r23, 7
 350:	80 95       	com	r24
 352:	98 2f       	mov	r25, r24
 354:	0e 94 35 02 	call	0x46a	; 0x46a <__floatsisf>
 358:	9b 01       	movw	r18, r22
 35a:	ac 01       	movw	r20, r24
 35c:	c7 01       	movw	r24, r14
 35e:	b6 01       	movw	r22, r12
 360:	0e 94 70 02 	call	0x4e0	; 0x4e0 <__gesf2>
 364:	18 16       	cp	r1, r24
 366:	5c f4       	brge	.+22     	; 0x37e <Pos_init+0x12e>
	{
		if (	DifrX > 0	)
 368:	1c 16       	cp	r1, r28
 36a:	1d 06       	cpc	r1, r29
 36c:	1c f4       	brge	.+6      	; 0x374 <Pos_init+0x124>
		{
			MOTORRIGHTOFF;
 36e:	2d 98       	cbi	0x05, 5	; 5
			MOTORLEFTTON;
 370:	2c 9a       	sbi	0x05, 4	; 5
 372:	07 c0       	rjmp	.+14     	; 0x382 <Pos_init+0x132>
		} 
		else if (	DifrX < 0	)
 374:	dd 23       	and	r29, r29
 376:	2c f4       	brge	.+10     	; 0x382 <Pos_init+0x132>
		{
			MOTORLEFTTOFF;
 378:	2c 98       	cbi	0x05, 4	; 5
			MOTORRIGHTON;
 37a:	2d 9a       	sbi	0x05, 5	; 5
 37c:	02 c0       	rjmp	.+4      	; 0x382 <Pos_init+0x132>
		}
	} 
	else
	{
		MOTORRIGHTOFF;
 37e:	2d 98       	cbi	0x05, 5	; 5
		MOTORLEFTTOFF;
 380:	2c 98       	cbi	0x05, 4	; 5
	}
	
	
	
	if (fabs(DifrY) > Difr)
 382:	c0 91 0c 01 	lds	r28, 0x010C
 386:	d0 91 0d 01 	lds	r29, 0x010D
 38a:	be 01       	movw	r22, r28
 38c:	88 27       	eor	r24, r24
 38e:	77 fd       	sbrc	r23, 7
 390:	80 95       	com	r24
 392:	98 2f       	mov	r25, r24
 394:	0e 94 35 02 	call	0x46a	; 0x46a <__floatsisf>
 398:	6b 01       	movw	r12, r22
 39a:	7c 01       	movw	r14, r24
 39c:	e8 94       	clt
 39e:	f7 f8       	bld	r15, 7
 3a0:	60 91 28 01 	lds	r22, 0x0128
 3a4:	70 91 29 01 	lds	r23, 0x0129
 3a8:	88 27       	eor	r24, r24
 3aa:	77 fd       	sbrc	r23, 7
 3ac:	80 95       	com	r24
 3ae:	98 2f       	mov	r25, r24
 3b0:	0e 94 35 02 	call	0x46a	; 0x46a <__floatsisf>
 3b4:	9b 01       	movw	r18, r22
 3b6:	ac 01       	movw	r20, r24
 3b8:	c7 01       	movw	r24, r14
 3ba:	b6 01       	movw	r22, r12
 3bc:	0e 94 70 02 	call	0x4e0	; 0x4e0 <__gesf2>
 3c0:	18 16       	cp	r1, r24
 3c2:	5c f4       	brge	.+22     	; 0x3da <Pos_init+0x18a>
	{
		if (	DifrY > 0	)
 3c4:	1c 16       	cp	r1, r28
 3c6:	1d 06       	cpc	r1, r29
 3c8:	1c f4       	brge	.+6      	; 0x3d0 <Pos_init+0x180>
		{
			MOTORUPOFF;
 3ca:	2b 98       	cbi	0x05, 3	; 5
			MOTORDOWNON;
 3cc:	2a 9a       	sbi	0x05, 2	; 5
 3ce:	07 c0       	rjmp	.+14     	; 0x3de <Pos_init+0x18e>
		}
		else if (	DifrY < 0	)
 3d0:	dd 23       	and	r29, r29
 3d2:	2c f4       	brge	.+10     	; 0x3de <Pos_init+0x18e>
		{
			MOTORDOWNOFF;
 3d4:	2a 98       	cbi	0x05, 2	; 5
			MOTORUPON;
 3d6:	2b 9a       	sbi	0x05, 3	; 5
 3d8:	02 c0       	rjmp	.+4      	; 0x3de <Pos_init+0x18e>
		}
	}
	else
	{
		MOTORDOWNOFF;
 3da:	2a 98       	cbi	0x05, 2	; 5
		MOTORUPOFF;
 3dc:	2b 98       	cbi	0x05, 3	; 5
           End If
           Waitms 25
     Loop
   End If
	*/
}
 3de:	df 91       	pop	r29
 3e0:	cf 91       	pop	r28
 3e2:	1f 91       	pop	r17
 3e4:	0f 91       	pop	r16
 3e6:	ff 90       	pop	r15
 3e8:	ef 90       	pop	r14
 3ea:	df 90       	pop	r13
 3ec:	cf 90       	pop	r12
 3ee:	08 95       	ret

000003f0 <main>:
void Pos_init();
uint16_t MaxFromArray(uint8_t* array);

int main(void)
{
	DDRB |= _BV(PB5);
 3f0:	25 9a       	sbi	0x04, 5	; 4
	
	
	
	ADC_init();
 3f2:	0e 94 02 01 	call	0x204	; 0x204 <ADC_init>
	LCD_Initalize();
 3f6:	0e 94 c7 00 	call	0x18e	; 0x18e <LCD_Initalize>
	ADCSRA |= (1<<ADSC);//Bit 6 – ADSC: ADC Start Conversion (uruchomienie pojedynczej konwersji
 3fa:	ea e7       	ldi	r30, 0x7A	; 122
 3fc:	f0 e0       	ldi	r31, 0x00	; 0
 3fe:	80 81       	ld	r24, Z
 400:	80 64       	ori	r24, 0x40	; 64
 402:	80 83       	st	Z, r24
	while(ADCSRA & (1<<ADSC));//czeka na zakoñczenie konwersji
 404:	80 81       	ld	r24, Z
 406:	86 fd       	sbrc	r24, 6
 408:	fd cf       	rjmp	.-6      	; 0x404 <main+0x14>
	itoa(ADC,bufor,10);
 40a:	80 91 78 00 	lds	r24, 0x0078
 40e:	90 91 79 00 	lds	r25, 0x0079
 412:	4a e0       	ldi	r20, 0x0A	; 10
 414:	50 e0       	ldi	r21, 0x00	; 0
 416:	66 e1       	ldi	r22, 0x16	; 22
 418:	71 e0       	ldi	r23, 0x01	; 1
 41a:	0e 94 98 02 	call	0x530	; 0x530 <itoa>
	LCD_WriteText(bufor);
 41e:	86 e1       	ldi	r24, 0x16	; 22
 420:	91 e0       	ldi	r25, 0x01	; 1
 422:	0e 94 ae 00 	call	0x15c	; 0x15c <LCD_WriteText>
    while(1)
    {
		Pos_init();
 426:	0e 94 28 01 	call	0x250	; 0x250 <Pos_init>
		LCD_Clear();
 42a:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_Clear>
		//ADCSRA |= (1<<ADSC);//Bit 6 – ADSC: ADC Start Conversion (uruchomienie pojedynczej konwersji
		//while(ADCSRA & (1<<ADSC));//czeka na zakoñczenie konwersji
		//itoa(ADC, bufor,10);
		//LCD_WriteText(bufor);
		itoa(Difr,bufor,10);
 42e:	4a e0       	ldi	r20, 0x0A	; 10
 430:	50 e0       	ldi	r21, 0x00	; 0
 432:	66 e1       	ldi	r22, 0x16	; 22
 434:	71 e0       	ldi	r23, 0x01	; 1
 436:	80 91 28 01 	lds	r24, 0x0128
 43a:	90 91 29 01 	lds	r25, 0x0129
 43e:	0e 94 98 02 	call	0x530	; 0x530 <itoa>
		LCD_WriteText("DIFF: ");	LCD_WriteText(bufor);
 442:	80 e0       	ldi	r24, 0x00	; 0
 444:	91 e0       	ldi	r25, 0x01	; 1
 446:	0e 94 ae 00 	call	0x15c	; 0x15c <LCD_WriteText>
 44a:	86 e1       	ldi	r24, 0x16	; 22
 44c:	91 e0       	ldi	r25, 0x01	; 1
 44e:	0e 94 ae 00 	call	0x15c	; 0x15c <LCD_WriteText>
 452:	2f ef       	ldi	r18, 0xFF	; 255
 454:	81 ee       	ldi	r24, 0xE1	; 225
 456:	94 e0       	ldi	r25, 0x04	; 4
 458:	21 50       	subi	r18, 0x01	; 1
 45a:	80 40       	sbci	r24, 0x00	; 0
 45c:	90 40       	sbci	r25, 0x00	; 0
 45e:	e1 f7       	brne	.-8      	; 0x458 <main+0x68>
 460:	00 c0       	rjmp	.+0      	; 0x462 <main+0x72>
 462:	00 00       	nop
 464:	e0 cf       	rjmp	.-64     	; 0x426 <main+0x36>

00000466 <__floatunsisf>:
 466:	e8 94       	clt
 468:	09 c0       	rjmp	.+18     	; 0x47c <__floatsisf+0x12>

0000046a <__floatsisf>:
 46a:	97 fb       	bst	r25, 7
 46c:	3e f4       	brtc	.+14     	; 0x47c <__floatsisf+0x12>
 46e:	90 95       	com	r25
 470:	80 95       	com	r24
 472:	70 95       	com	r23
 474:	61 95       	neg	r22
 476:	7f 4f       	sbci	r23, 0xFF	; 255
 478:	8f 4f       	sbci	r24, 0xFF	; 255
 47a:	9f 4f       	sbci	r25, 0xFF	; 255
 47c:	99 23       	and	r25, r25
 47e:	a9 f0       	breq	.+42     	; 0x4aa <__floatsisf+0x40>
 480:	f9 2f       	mov	r31, r25
 482:	96 e9       	ldi	r25, 0x96	; 150
 484:	bb 27       	eor	r27, r27
 486:	93 95       	inc	r25
 488:	f6 95       	lsr	r31
 48a:	87 95       	ror	r24
 48c:	77 95       	ror	r23
 48e:	67 95       	ror	r22
 490:	b7 95       	ror	r27
 492:	f1 11       	cpse	r31, r1
 494:	f8 cf       	rjmp	.-16     	; 0x486 <__floatsisf+0x1c>
 496:	fa f4       	brpl	.+62     	; 0x4d6 <__floatsisf+0x6c>
 498:	bb 0f       	add	r27, r27
 49a:	11 f4       	brne	.+4      	; 0x4a0 <__floatsisf+0x36>
 49c:	60 ff       	sbrs	r22, 0
 49e:	1b c0       	rjmp	.+54     	; 0x4d6 <__floatsisf+0x6c>
 4a0:	6f 5f       	subi	r22, 0xFF	; 255
 4a2:	7f 4f       	sbci	r23, 0xFF	; 255
 4a4:	8f 4f       	sbci	r24, 0xFF	; 255
 4a6:	9f 4f       	sbci	r25, 0xFF	; 255
 4a8:	16 c0       	rjmp	.+44     	; 0x4d6 <__floatsisf+0x6c>
 4aa:	88 23       	and	r24, r24
 4ac:	11 f0       	breq	.+4      	; 0x4b2 <__floatsisf+0x48>
 4ae:	96 e9       	ldi	r25, 0x96	; 150
 4b0:	11 c0       	rjmp	.+34     	; 0x4d4 <__floatsisf+0x6a>
 4b2:	77 23       	and	r23, r23
 4b4:	21 f0       	breq	.+8      	; 0x4be <__floatsisf+0x54>
 4b6:	9e e8       	ldi	r25, 0x8E	; 142
 4b8:	87 2f       	mov	r24, r23
 4ba:	76 2f       	mov	r23, r22
 4bc:	05 c0       	rjmp	.+10     	; 0x4c8 <__floatsisf+0x5e>
 4be:	66 23       	and	r22, r22
 4c0:	71 f0       	breq	.+28     	; 0x4de <__floatsisf+0x74>
 4c2:	96 e8       	ldi	r25, 0x86	; 134
 4c4:	86 2f       	mov	r24, r22
 4c6:	70 e0       	ldi	r23, 0x00	; 0
 4c8:	60 e0       	ldi	r22, 0x00	; 0
 4ca:	2a f0       	brmi	.+10     	; 0x4d6 <__floatsisf+0x6c>
 4cc:	9a 95       	dec	r25
 4ce:	66 0f       	add	r22, r22
 4d0:	77 1f       	adc	r23, r23
 4d2:	88 1f       	adc	r24, r24
 4d4:	da f7       	brpl	.-10     	; 0x4cc <__floatsisf+0x62>
 4d6:	88 0f       	add	r24, r24
 4d8:	96 95       	lsr	r25
 4da:	87 95       	ror	r24
 4dc:	97 f9       	bld	r25, 7
 4de:	08 95       	ret

000004e0 <__gesf2>:
 4e0:	03 d0       	rcall	.+6      	; 0x4e8 <__fp_cmp>
 4e2:	08 f4       	brcc	.+2      	; 0x4e6 <__gesf2+0x6>
 4e4:	8f ef       	ldi	r24, 0xFF	; 255
 4e6:	08 95       	ret

000004e8 <__fp_cmp>:
 4e8:	99 0f       	add	r25, r25
 4ea:	00 08       	sbc	r0, r0
 4ec:	55 0f       	add	r21, r21
 4ee:	aa 0b       	sbc	r26, r26
 4f0:	e0 e8       	ldi	r30, 0x80	; 128
 4f2:	fe ef       	ldi	r31, 0xFE	; 254
 4f4:	16 16       	cp	r1, r22
 4f6:	17 06       	cpc	r1, r23
 4f8:	e8 07       	cpc	r30, r24
 4fa:	f9 07       	cpc	r31, r25
 4fc:	c0 f0       	brcs	.+48     	; 0x52e <__fp_cmp+0x46>
 4fe:	12 16       	cp	r1, r18
 500:	13 06       	cpc	r1, r19
 502:	e4 07       	cpc	r30, r20
 504:	f5 07       	cpc	r31, r21
 506:	98 f0       	brcs	.+38     	; 0x52e <__fp_cmp+0x46>
 508:	62 1b       	sub	r22, r18
 50a:	73 0b       	sbc	r23, r19
 50c:	84 0b       	sbc	r24, r20
 50e:	95 0b       	sbc	r25, r21
 510:	39 f4       	brne	.+14     	; 0x520 <__fp_cmp+0x38>
 512:	0a 26       	eor	r0, r26
 514:	61 f0       	breq	.+24     	; 0x52e <__fp_cmp+0x46>
 516:	23 2b       	or	r18, r19
 518:	24 2b       	or	r18, r20
 51a:	25 2b       	or	r18, r21
 51c:	21 f4       	brne	.+8      	; 0x526 <__fp_cmp+0x3e>
 51e:	08 95       	ret
 520:	0a 26       	eor	r0, r26
 522:	09 f4       	brne	.+2      	; 0x526 <__fp_cmp+0x3e>
 524:	a1 40       	sbci	r26, 0x01	; 1
 526:	a6 95       	lsr	r26
 528:	8f ef       	ldi	r24, 0xFF	; 255
 52a:	81 1d       	adc	r24, r1
 52c:	81 1d       	adc	r24, r1
 52e:	08 95       	ret

00000530 <itoa>:
 530:	45 32       	cpi	r20, 0x25	; 37
 532:	51 05       	cpc	r21, r1
 534:	20 f4       	brcc	.+8      	; 0x53e <itoa+0xe>
 536:	42 30       	cpi	r20, 0x02	; 2
 538:	10 f0       	brcs	.+4      	; 0x53e <itoa+0xe>
 53a:	0c 94 a3 02 	jmp	0x546	; 0x546 <__itoa_ncheck>
 53e:	fb 01       	movw	r30, r22
 540:	10 82       	st	Z, r1
 542:	cb 01       	movw	r24, r22
 544:	08 95       	ret

00000546 <__itoa_ncheck>:
 546:	bb 27       	eor	r27, r27
 548:	4a 30       	cpi	r20, 0x0A	; 10
 54a:	31 f4       	brne	.+12     	; 0x558 <__itoa_ncheck+0x12>
 54c:	99 23       	and	r25, r25
 54e:	22 f4       	brpl	.+8      	; 0x558 <__itoa_ncheck+0x12>
 550:	bd e2       	ldi	r27, 0x2D	; 45
 552:	90 95       	com	r25
 554:	81 95       	neg	r24
 556:	9f 4f       	sbci	r25, 0xFF	; 255
 558:	0c 94 af 02 	jmp	0x55e	; 0x55e <__utoa_common>

0000055c <__utoa_ncheck>:
 55c:	bb 27       	eor	r27, r27

0000055e <__utoa_common>:
 55e:	fb 01       	movw	r30, r22
 560:	55 27       	eor	r21, r21
 562:	aa 27       	eor	r26, r26
 564:	88 0f       	add	r24, r24
 566:	99 1f       	adc	r25, r25
 568:	aa 1f       	adc	r26, r26
 56a:	a4 17       	cp	r26, r20
 56c:	10 f0       	brcs	.+4      	; 0x572 <__utoa_common+0x14>
 56e:	a4 1b       	sub	r26, r20
 570:	83 95       	inc	r24
 572:	50 51       	subi	r21, 0x10	; 16
 574:	b9 f7       	brne	.-18     	; 0x564 <__utoa_common+0x6>
 576:	a0 5d       	subi	r26, 0xD0	; 208
 578:	aa 33       	cpi	r26, 0x3A	; 58
 57a:	08 f0       	brcs	.+2      	; 0x57e <__utoa_common+0x20>
 57c:	a9 5d       	subi	r26, 0xD9	; 217
 57e:	a1 93       	st	Z+, r26
 580:	00 97       	sbiw	r24, 0x00	; 0
 582:	79 f7       	brne	.-34     	; 0x562 <__utoa_common+0x4>
 584:	b1 11       	cpse	r27, r1
 586:	b1 93       	st	Z+, r27
 588:	11 92       	st	Z+, r1
 58a:	cb 01       	movw	r24, r22
 58c:	0c 94 c8 02 	jmp	0x590	; 0x590 <strrev>

00000590 <strrev>:
 590:	dc 01       	movw	r26, r24
 592:	fc 01       	movw	r30, r24
 594:	67 2f       	mov	r22, r23
 596:	71 91       	ld	r23, Z+
 598:	77 23       	and	r23, r23
 59a:	e1 f7       	brne	.-8      	; 0x594 <strrev+0x4>
 59c:	32 97       	sbiw	r30, 0x02	; 2
 59e:	04 c0       	rjmp	.+8      	; 0x5a8 <strrev+0x18>
 5a0:	7c 91       	ld	r23, X
 5a2:	6d 93       	st	X+, r22
 5a4:	70 83       	st	Z, r23
 5a6:	62 91       	ld	r22, -Z
 5a8:	ae 17       	cp	r26, r30
 5aa:	bf 07       	cpc	r27, r31
 5ac:	c8 f3       	brcs	.-14     	; 0x5a0 <strrev+0x10>
 5ae:	08 95       	ret

000005b0 <_exit>:
 5b0:	f8 94       	cli

000005b2 <__stop_program>:
 5b2:	ff cf       	rjmp	.-2      	; 0x5b2 <__stop_program>
